name: Update Hugo Module

permissions:
  contents: write
  pull-requests: write

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Run weekly to check for updates
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight

jobs:
  update-module:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CI_TOKEN }}

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Update Hugo Module
        run: |
          git config --global user.name 'Git bot'
          git config --global user.email 'bot@noreply.github.com'
          git config --global --add --bool push.autoSetupRemote true
          
          # Fetch latest changes from remote first
          git fetch origin
          
          # Create unique branch name with timestamp to avoid conflicts
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          DAILY_BRANCH="module-update/$(date +%Y-%m-%d)"
          
          # Check if a daily branch exists and delete any local version
          if git show-ref --verify --quiet "refs/heads/$DAILY_BRANCH"; then
            echo "Deleting existing local daily branch..."
            git branch -D "$DAILY_BRANCH"
          fi
          
          # Check if remote daily branch exists
          if git ls-remote --heads origin "$DAILY_BRANCH" | grep -q "$DAILY_BRANCH"; then
            echo "Found existing remote daily branch, checking it out and updating..."
            git checkout -b "$DAILY_BRANCH" "origin/$DAILY_BRANCH"
            BRANCH_NAME="$DAILY_BRANCH"
          else
            echo "Creating new timestamped branch: module-update/${TIMESTAMP}"
            git checkout -b "module-update/${TIMESTAMP}"
            BRANCH_NAME="module-update/${TIMESTAMP}"
          fi
          
          # Store original module version
          OLD_VERSION=$(hugo mod graph | grep -o '@v[0-9]*\.[0-9]*\.[0-9]*' | head -n1)
          
          # Update modules
          hugo mod get -u
          hugo mod tidy
          
          # Get new module version
          NEW_VERSION=$(hugo mod graph | grep -o '@v[0-9]*\.[0-9]*\.[0-9]*' | head -n1)
          
          # Check if there are any changes
          if [[ -n $(git status -s) ]]; then
            # Update package.json
            hugo mod npm pack
            npm install

            # Add changes
            git add go.mod go.sum
            if [[ -f package.json ]]; then
              git add package.json
            fi
            if [[ -f package-lock.json ]]; then
              git add package-lock.json
            fi
            
            git commit -m "Update Hugo modules from ${OLD_VERSION} to ${NEW_VERSION}"
            
            # Push the changes - use force-with-lease for daily branches, regular push for timestamped branches
            if [[ "$BRANCH_NAME" == "module-update/$(date +%Y-%m-%d)" ]]; then
              echo "Pushing updates to existing daily branch..."
              git push origin "$BRANCH_NAME" --force-with-lease
            else
              echo "Pushing new timestamped branch..."
              git push origin "$BRANCH_NAME"
            fi
            
            PR_BODY="ðŸ¤– Automated update of Hugo modules.
            
            Module version changed from ${OLD_VERSION} to ${NEW_VERSION}
            
            Created by Github action: https://github.com/zetxek/adritian-demo/actions/workflows/update-hugo-module.yml"

            # Check if PR already exists for this branch
            if ! gh pr list --head "$BRANCH_NAME" --state open | grep -q "$BRANCH_NAME"; then
              # Create PR only if it doesn't exist
              gh pr create \
                -B main \
                -H "$BRANCH_NAME" \
                --title "[auto] Update Hugo modules ${OLD_VERSION} â†’ ${NEW_VERSION}" \
                --body "$PR_BODY"
            else
              echo "PR already exists for branch $BRANCH_NAME, updating it..."
              # Update the existing PR
              gh pr edit "$BRANCH_NAME" \
                --title "[auto] Update Hugo modules ${OLD_VERSION} â†’ ${NEW_VERSION}" \
                --body "$PR_BODY"
            fi
          else
            echo "No updates found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
